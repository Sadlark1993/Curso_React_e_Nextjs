//**************** AULA 421 a 423: Pasta do projeto, instalando typescript *******************

//repositório do curso TS: https://github.com/luizomf/cursojstypescript

npm init -y
npm i typescript -D // instalando o typescript no repositório.

//escreveu um codigo js qualquer no arquivo index.ts

npx tsc index.ts //compilou o arquivo index.ts para um arquivo index.js

node index.js // executando meu codigo js
node index.ts //conseguiu executar pq o codigo é js

//depois que coloquei tipo na variavel no .ts, o node nao conseguiu mais executar ele.

/*o ts pode funcionar em dois modos: script mode ou module mode. Em script mode ele considera os 
documentos como se fossem um so documento grande, isso pode dar problema, por exemplo, se tiver duas
variaveis ou funcoes com o mesmo nome em documentos diferentes.*/

/*Se vc exportar qualquer coisa no seu documento (export default nome), vai mudar automaticamente de
script mode para module mode. Em 99,9% dos casos, vc estará trabalhando em module mode.*/

// ********** AULA 424, a 428: instalando ts-node, Code Runner, ESLint, tsconfig.json e gerar editor config ***********

npm i ts-node -D

//instalar a extensão no vscode Code Runner

// criar pasta .vscode, dentro dela, criar arquivo settings.json, colocar o code-runner.executor maps.
/* apagar tudo que tem dentro dele, e deixar apenas o typescript. Modificar o typescript para ficar assim:

{
  "code-runner.executorMap": {
    "typescript": "npx ts-node --files"
  }
}

 pronto, agora da pra executar codigo .ts pelo code-runner nesse diretorio.
*/

npm i eslint -D
npm i @typescript-eslint/eslint-plugin @typescript-eslint/parser -D

//criar arquivo .eslintrc.js
//colar aquilo q ta no arquivo no repositório dele.

//ele configurou o prettier, mas eu gosto de usar ele so pra html e css.

//para ver opções de compilação, pesquise tsc compiler options no google.

npx tsc --init //vai criar o arquivo de configuração do tsc tsconfig.json

/*no arquivo tsconfig.json, especificar no lib[], o que será usado no projeto.
deixe ele assim: lib["ESNext", "DOM"],

//Os arquivos .ts ficarao dentro da pasta src. Crie a pasta src.

/*no arquivo tsconfit.json, configurar "outDir": "./dist", para definir essa pasta
como a pasta de saída para os arquivos compilados para .js. */

//no arquivo tsconfit.json, "strict": true,. Se estiver migrando codigo, coloca false.

/*no tsconfig.json, depois do fechamento da chave de compilerOptions, insira:

"include": [
  "./src"
]

para definir a pasta de entrada (onde estarao os .ts que serao compilados para .js q vao 
ficar dentro da pasta ./dist). */

//para compilar a pasta src:
npx tsc

//instalar extensao EditorConfig, clica com botao direito no espaço vazio dos diretorios
e clica em generate editorconfig. Mude trim_trailing_whitespace e insert_final_newline para 
true, insira end_of_line = lf.